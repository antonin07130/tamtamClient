package com.tamtam.android.tamtam.services.json;

import com.tamtam.android.tamtam.JsonThingTestData;
import com.tamtam.android.tamtam.model.ThingObject;
import com.tamtam.android.tamtam.model.ThingObject.PositionObject;
import com.tamtam.android.tamtam.model.ThingObject.PriceObject;
import com.tamtam.android.tamtam.model.UserObject;
import com.tamtam.android.tamtam.services.json.JsonThingConverter;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Currency;
import java.util.List;

import static com.tamtam.android.tamtam.JsonThingTestData.*;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;


/**
 * Created by fcng1847 on 11/01/17.
 */
public class JsonThingConverterTest {


    //// TODO: 14/01/17 replace by values generated by a mock Repository
    /*
    private final String jsonThingString1 = "{\"thingId\":\"thing1\"," +
            "\"pict\":\"AAaaaIaAMaBASEa64aENCODEDaaaag==\"," +
            "\"description\":\"cest un premier truc\"," +
            "\"price\":{\"currency\":489,\"price\":10.10}," +
            "\"position\":{\"lon\":7.05289,\"lat\":43.6166}," +
            "\"stuck\":false}";
    private final String jsonThingString2 = "{\"thingId\":\"thing2\"," +
            "\"pict\":\"AAaaaIaAMaBASEa64aENCODEDaaaag==\"," +
            "\"description\":\"cest un deuxieme truc\"," +
            "\"price\":{\"currency\":489,\"price\":20.20}," +
            "\"position\":{\"lon\":7.05334,\"lat\":43.61664}," +
            "\"stuck\":false}";
    private final String jsonThingString3 = "{\"thingId\":\"thing3\"," +
            "\"pict\":\"AAaaaIaAMaBASEa64aENCODEDaaaag==\"," +
            "\"description\":\"cest un troisieme truc\"," +
            "\"price\":{\"currency\":489,\"price\":30.30}," +
            "\"position\":{\"lon\":7.12153,\"lat\":43.65839}," +
            "\"stuck\":false}";
    */
    private final String jsonThingsArray = "[" +
            JsonThingTestData.JSON_THING_STRING_1 + "," +
            JsonThingTestData.JSON_THING_STRING_2 + "," +
            JsonThingTestData.JSON_THING_STRING_3 + "]";

    private PositionObject positionObject1 =
            new PositionObject(7.05289, 43.6166);
    private PriceObject priceObject1 =
            new PriceObject(Currency.getInstance("EUR"), 10.10);
    private ThingObject thingObject1 = new ThingObject.ThingBuilder()
            .thingId("thing1")
            .pict("AAaaaIaAMaBASEa64aENCODEDaaaag==")
            .description("cest un premier truc")
            .position(positionObject1)
            .price(priceObject1)
            .stuck(false)
            .build();

    private ThingObject thingObject2 = new ThingObject.ThingBuilder()
            .thingId("thing2")
            .pict("AAaaaIaAMaBASEa64aENCODEDaaaag==")
            .description("cest un deuxieme truc")
            .position(new PositionObject(7.05334, 43.61664))
            .price(new PriceObject(Currency.getInstance("EUR"), 20.20))
            .stuck(false)
            .build();

    private ThingObject thingObject3 = new ThingObject.ThingBuilder()
            .thingId("thing3")
            .pict("AAaaaIaAMaBASEa64aENCODEDaaaag==")
            .description("cest un troisieme truc")
            .position(new PositionObject(7.12153, 43.65839))
            .price(new PriceObject(Currency.getInstance("EUR"), 30.30))
            .stuck(false)
            .build();

    private List<ThingObject> thingObjects =
            Arrays.asList(thingObject1, thingObject2, thingObject3);



    private JsonThingConverter jsonThingConverter;

    @Before
    public void constructor() throws Exception {
        jsonThingConverter = new JsonThingConverter();
    }

    @Test
    public void fromJson() throws Exception {
        ThingObject thing1 = jsonThingConverter.fromJson(JSON_THING_STRING_1);

        assertEquals("thing1", thing1.getThingId());
        assertEquals(thingObject1, thing1);
    }

    @Test
    public void toJson() throws Exception {
        String resultJson = jsonThingConverter.toJson(thingObject1);
        assertTrue(ParsableJson(resultJson));
        assertTrue(resultJson.contains(JsonThingConverter.ID_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.CURRENCY_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.DESCRIPTION_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.LATITUDE_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.LONGITUDE_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.PICTURE_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.PRICE_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.POSITION_OBJ_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.PRICE_OBJ_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.STUCK_KEYNAME));

    }

    @Test
    public void fomJsonToJson() throws Exception {
        String resultJson = jsonThingConverter.toJson(
                jsonThingConverter.fromJson(JSON_THING_STRING_1));
        assertTrue(ParsableJson(resultJson));
        assertTrue(resultJson.contains(JsonThingConverter.ID_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.CURRENCY_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.DESCRIPTION_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.LATITUDE_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.LONGITUDE_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.PICTURE_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.PRICE_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.POSITION_OBJ_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.PRICE_OBJ_KEYNAME));
        assertTrue(resultJson.contains(JsonThingConverter.STUCK_KEYNAME));

    }

    @Test
    public void toJsonFromJson() throws Exception {
        ThingObject generatedThing = jsonThingConverter.fromJson(
                jsonThingConverter.toJson(thingObject1));

        assertEquals(thingObject1, generatedThing);
    }

    @Test
    public void fromJsonArray() throws Exception{
        List<ThingObject> generatedThingsList = jsonThingConverter.fromJsonArray(jsonThingsArray);
        assertEquals(thingObjects, generatedThingsList);
    }

    @Test
    public void fromEmptyJsonArray() throws Exception{
        List<ThingObject> emptyList = new ArrayList<>();
        List<ThingObject> generatedThingsList = jsonThingConverter.fromJsonArray("[]");
        assertEquals(emptyList, generatedThingsList);
    }

    @Test
    public void fromEmptyJson() throws Exception{
        assertNull(jsonThingConverter.fromJson("{}"));
    }

    @Test
    public void fromMalformedJsonArray() throws Exception{
        try {
            List<ThingObject> things = jsonThingConverter.fromJsonArray("[%*sdcccq]");
            fail("Should throw a JsonToModelReaderException when attempting to parse malformed Json");
        }
        catch(JsonToModelReaderException e){
            assert(e.getMessage().contains("Reading json array"));
        }
    }


    @Test
    public void fromMalformedJson() throws Exception{
        try {
            ThingObject things = jsonThingConverter.fromJson("{toto%*sd:cccq}");
            fail("Should throw a JsonToModelReaderException when attempting to parse malformed Json");
        }
        catch(JsonToModelReaderException e){
            assert(e.getMessage().contains("Reading json"));
        }
    }

    /***
     * ugly utility function to verify that a Json String is parsable
     * @param test json string to verify.
     * @return true if parsable by {@link JSONObject} or {@link JSONArray}, false otherwise
     */
    boolean ParsableJson(String test) {
        try {
            new JSONObject(test);
        } catch (JSONException ex) {
            try {
                new JSONArray(test);
            } catch (JSONException ex1) {
                return false;
            }
        }
        return true;
    }
}